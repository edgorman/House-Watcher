name: "Plan Cloud Deployment on Develop"

on:
  pull_request:
    branches:
      - develop

env:
  GCP_PROJET_ID: "property-fundamentals-dev"
  GCP_DOCKER_CREDENTIALS: "${{ secrets.GCP_DOCKER_CREDENTIALS }}"
  GCP_LOCATION: "europe-west1"
  TF_CLOUD_ORGANIZATION: "property-fundamentals-dev"
  TF_WORKSPACE: "property-fundamentals"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_LOCAL_DIRECTORY: "property_fundamentals/infrastructure/dev/."

jobs:
  docker:
    name: "Push Docker Images"
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: GCP Authenticate
        id: gcp_auth
        uses: google-github-actions/auth@v1
        with:
          token_format: access_token
          credentials_json: ${{ env.GCP_DOCKER_CREDENTIALS }}

      - name: Docker Authenticate
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GCP_LOCATION }}-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.gcp_auth.outputs.access_token }}

      - name: Checkout
        uses: actions/checkout@v3

      - name: Docker build
        run: docker build property_fundamentals/backend/. -t "${{ env.GCP_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJET_ID }}/backend/main:develop"

      - name: Docker push
        run: docker push "${{ env.GCP_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJET_ID }}/backend/main:develop"

  terraform:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
        id: plan-upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.TF_LOCAL_DIRECTORY }}
          speculative: true

      - name: Create Plan Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
        id: plan-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
          plan_only: true

      - name: Get Plan Output
        uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.0
        id: plan-output
        with:
          plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}

      - name: Update PR
        uses: actions/github-script@v6
        id: plan-comment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Cloud Plan Output')
            });
            const output = `#### Terraform Cloud Plan Output
               \`\`\`
               Plan: ${{ steps.plan-output.outputs.add }} to add, ${{ steps.plan-output.outputs.change }} to change, ${{ steps.plan-output.outputs.destroy }} to destroy.
               \`\`\`
               [Terraform Cloud Plan](${{ steps.plan-run.outputs.run_link }})
               `;
            // 3. Delete previous comment so PR timeline makes sense
            if (botComment) {
              github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
              });
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
