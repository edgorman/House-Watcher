name: Terraform Plan

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      terraform-token:
        required: true
        type: string

jobs:
  terraform-plan:
    name: Plan
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - id: terraform-plan-environment
        name: Set Environment Variables
        run: |
          echo "TF_WORKSPACE=${{ vars.TF_WORKSPACE }}" >> $GITHUB_ENV
          echo "TF_LOCAL_DIRECTORY=${{ vars.TF_DIRECTORY }}" >> $GITHUB_ENV
          echo "TF_CLOUD_ORGANIZATION=${{ vars.TF_ORGANIZATION }}" >> $GITHUB_ENV
          echo "TF_API_TOKEN=${{ inputs.terraform-token }}" >> $GITHUB_ENV


      - id: terraform-plan-upload
        name: Upload
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
        with:
          workspace: ${{ vars.TF_WORKSPACE }}
          directory: ${{ vars.TF_DIRECTORY }}
          speculative: true

      - id: terraform-plan-create
        name: Create
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
        with:
          workspace: ${{ vars.TF_WORKSPACE }}
          configuration_version: ${{ steps.terraform-plan-upload.outputs.configuration_version_id }}
          plan_only: true

      - id: terraform-plan-plan
        name: Plan
        uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.0
        with:
          plan: ${{ fromJSON(steps.terraform-plan-create.outputs.payload).data.relationships.plan.data.id }}
    
      - id: terraform-plan-pr
        name: Update PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
            });
            const botComment = comments.find(comment => {
                return comment.user.type === 'Bot' && comment.body.includes('Terraform Cloud Plan Output')
            });
            const output = `#### Terraform Cloud Plan Output
                \`\`\`
                Plan: ${{ steps.terraform-plan-plan.outputs.add }} to add, ${{ steps.terraform-plan-plan.outputs.change }} to change, ${{ steps.terraform-plan-plan.outputs.destroy }} to destroy.
                \`\`\`
                [Terraform Cloud Plan](${{ steps.terraform-plan-create.outputs.run_link }})
                `;
            // 3. Delete previous comment so PR timeline makes sense
            if (botComment) {
                github.rest.issues.deleteComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: botComment.id,
                });
            }
            github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
            });
